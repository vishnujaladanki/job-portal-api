// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source=repo.go -destination=repo_mock.go -package=repository
//
// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	models "job-portal/internal/models"
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AuthenticateUser mocks base method.
func (m *MockRepository) AuthenticateUser(ctx context.Context, email, password string) (jwt.RegisteredClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateUser", ctx, email, password)
	ret0, _ := ret[0].(jwt.RegisteredClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateUser indicates an expected call of AuthenticateUser.
func (mr *MockRepositoryMockRecorder) AuthenticateUser(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateUser", reflect.TypeOf((*MockRepository)(nil).AuthenticateUser), ctx, email, password)
}

// CheckUserEmail mocks base method.
func (m *MockRepository) CheckUserEmail(email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserEmail", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUserEmail indicates an expected call of CheckUserEmail.
func (mr *MockRepositoryMockRecorder) CheckUserEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserEmail", reflect.TypeOf((*MockRepository)(nil).CheckUserEmail), email)
}

// CreateC mocks base method.
func (m *MockRepository) CreateC(ctx context.Context, nc models.NewCompany) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateC", ctx, nc)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateC indicates an expected call of CreateC.
func (mr *MockRepositoryMockRecorder) CreateC(ctx, nc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateC", reflect.TypeOf((*MockRepository)(nil).CreateC), ctx, nc)
}

// CreateJ mocks base method.
func (m *MockRepository) CreateJ(ctx context.Context, nj models.NewJob, cId int) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJ", ctx, nj, cId)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJ indicates an expected call of CreateJ.
func (mr *MockRepositoryMockRecorder) CreateJ(ctx, nj, cId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJ", reflect.TypeOf((*MockRepository)(nil).CreateJ), ctx, nj, cId)
}

// CreateU mocks base method.
func (m *MockRepository) CreateU(ctx context.Context, nu models.NewUser) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateU", ctx, nu)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateU indicates an expected call of CreateU.
func (mr *MockRepositoryMockRecorder) CreateU(ctx, nu any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateU", reflect.TypeOf((*MockRepository)(nil).CreateU), ctx, nu)
}

// GetCompanyByID mocks base method.
func (m *MockRepository) GetCompanyByID(uid int) (models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompanyByID", uid)
	ret0, _ := ret[0].(models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompanyByID indicates an expected call of GetCompanyByID.
func (mr *MockRepositoryMockRecorder) GetCompanyByID(uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompanyByID", reflect.TypeOf((*MockRepository)(nil).GetCompanyByID), uid)
}

// GetJobById mocks base method.
func (m *MockRepository) GetJobById(jId int) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobById", jId)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobById indicates an expected call of GetJobById.
func (mr *MockRepositoryMockRecorder) GetJobById(jId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobById", reflect.TypeOf((*MockRepository)(nil).GetJobById), jId)
}

// Process mocks base method.
func (m *MockRepository) Process(jId int) (models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", jId)
	ret0, _ := ret[0].(models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockRepositoryMockRecorder) Process(jId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockRepository)(nil).Process), jId)
}

// UpdateUserPassword mocks base method.
func (m *MockRepository) UpdateUserPassword(np models.Reset) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", np)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockRepositoryMockRecorder) UpdateUserPassword(np any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockRepository)(nil).UpdateUserPassword), np)
}

// ViewCompanies mocks base method.
func (m *MockRepository) ViewCompanies() ([]models.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewCompanies")
	ret0, _ := ret[0].([]models.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewCompanies indicates an expected call of ViewCompanies.
func (mr *MockRepositoryMockRecorder) ViewCompanies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewCompanies", reflect.TypeOf((*MockRepository)(nil).ViewCompanies))
}

// ViewJobById mocks base method.
func (m *MockRepository) ViewJobById(cId int) ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobById", cId)
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobById indicates an expected call of ViewJobById.
func (mr *MockRepositoryMockRecorder) ViewJobById(cId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobById", reflect.TypeOf((*MockRepository)(nil).ViewJobById), cId)
}

// ViewJobs mocks base method.
func (m *MockRepository) ViewJobs() ([]models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewJobs")
	ret0, _ := ret[0].([]models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewJobs indicates an expected call of ViewJobs.
func (mr *MockRepositoryMockRecorder) ViewJobs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewJobs", reflect.TypeOf((*MockRepository)(nil).ViewJobs))
}
